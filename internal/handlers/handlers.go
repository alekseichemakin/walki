package handlers

import (
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strconv"
	"walki/internal/constants"
	"walki/internal/handlers/mux"
	"walki/internal/handlers/mux/middlewares"
	"walki/internal/keyboards"
	"walki/internal/service"
	"walki/internal/service/tgmedia"
)

// Handler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback'–∏
type Handler struct {
	bot *tgbotapi.BotAPI
	// —Å–µ—Ä–≤–∏—Å—ã
	routes  *service.RouteService
	orders  *service.OrderService
	profile *service.ProfileService
	users   *service.UserService
	run     *service.RouteRunService
	tgMedia *tgmedia.Service
	router  *mux.Router
}

// –ß–∏—Å—Ç—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å DI (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ app/bot)
func NewHandler(bot *tgbotapi.BotAPI,
	rs *service.RouteService,
	os *service.OrderService,
	ps *service.ProfileService,
	userSvc *service.UserService,
	runSvc *service.RouteRunService,
	tg *tgmedia.Service) *Handler {
	h := &Handler{
		bot:     bot,
		routes:  rs,
		orders:  os,
		profile: ps,
		users:   userSvc,
		run:     runSvc,
		tgMedia: tg,
	}

	// --- Router  middlewares
	r := mux.New()
	r.Use(middlewares.Logging())
	r.Use(middlewares.AnswerCallback())
	r.Use(middlewares.WithUser(h.users))
	//r.Use(middlewares.Timeout(5 * time.Second)) // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏

	// === –ö–æ–º–∞–Ω–¥—ã
	r.Command("start", func(u *mux.UpdateCtx) error { h.handleStart(u.Update); return nil })
	r.Command("routes", func(u *mux.UpdateCtx) error { h.handleRoutes(u.Update); return nil })
	r.Command("profile", func(u *mux.UpdateCtx) error { h.handleProfile(u.Update); return nil })
	r.Command("help", func(u *mux.UpdateCtx) error { h.handleHelp(u.Update); return nil })

	// === –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
	r.Message(keyboards.ButtonTexts[constants.BtnRoutes], func(u *mux.UpdateCtx) error { h.handleRoutes(u.Update); return nil })
	r.Message(keyboards.ButtonTexts[constants.BtnProfile], func(u *mux.UpdateCtx) error { h.handleProfile(u.Update); return nil })
	r.Message(keyboards.ButtonTexts[constants.BtnHelp], func(u *mux.UpdateCtx) error { h.handleHelp(u.Update); return nil })

	// === Callback‚Äô–∏ (—Ç–æ—á–Ω—ã–µ)
	r.CallbackExact("action:select_city", func(u *mux.UpdateCtx) error { h.showCitySelection(u.ChatID); return nil })
	r.CallbackExact("menu:main", func(u *mux.UpdateCtx) error { h.showMainMenu(u.ChatID); return nil })
	r.CallbackExact("profile:my_routes", func(u *mux.UpdateCtx) error {
		usr := middlewares.UserFrom(u.Ctx)
		if usr == nil {
			h.sendMessage(u.ChatID, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
			return nil
		}
		h.showUserRoutes(u.ChatID, usr.ID)
		return nil
	})

	// === Callback‚Äô–∏ (–ø—Ä–µ—Ñ–∏–∫—Å—ã)
	r.CallbackPrefix(CallbackCity, func(u *mux.UpdateCtx, v mux.Values) error {
		h.showRoutesByCity(u.ChatID, v["id"])
		return nil
	})
	r.CallbackPrefix(CallbackRoute, func(u *mux.UpdateCtx, v mux.Values) error {
		id, _ := strconv.Atoi(v["id"])
		h.showRouteDetails(u.ChatID, id)
		return nil
	})
	r.CallbackPrefix(CallbackBuy, func(u *mux.UpdateCtx, v mux.Values) error {
		routeID, _ := strconv.Atoi(v["id"])
		usr := middlewares.UserFrom(u.Ctx)
		if usr == nil {
			h.sendMessage(u.ChatID, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
			return nil
		}
		h.handlePurchase(u.ChatID, usr, routeID)
		return nil
	})
	r.CallbackPrefix(CallbackPurchasedRoute, func(u *mux.UpdateCtx, v mux.Values) error {
		routeID, _ := strconv.Atoi(v["id"])
		usr := middlewares.UserFrom(u.Ctx)
		if usr == nil {
			h.sendMessage(u.ChatID, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
			return nil
		}
		h.showPurchasedRouteDetails(u.ChatID, usr.ID, routeID)
		return nil
	})
	// –≤ NewHandler, —Ç–∞–º –≥–¥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—à—å router r := mux.New()
	r.CallbackPrefix(CallbackStartRoute, func(u *mux.UpdateCtx, v mux.Values) error {
		routeID, _ := strconv.Atoi(v["id"])
		usr := middlewares.UserFrom(u.Ctx)
		if usr == nil {
			h.sendMessage(u.ChatID, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
			return nil
		}

		// –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å?
		if pr, _ := h.run.Progress(u.Ctx, usr.ID, routeID); pr != nil && pr.FinishedAt == nil {
			// —Å–ø—Ä–æ—Å–∏–º: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
			kb := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", fmt.Sprintf("route_continue:%d", routeID)),
					tgbotapi.NewInlineKeyboardButtonData("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", fmt.Sprintf("route_restart:%d", routeID)),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "menu:main"),
				),
			)
			msg := tgbotapi.NewMessage(u.ChatID, "–£ –≤–∞—Å —É–∂–µ –Ω–∞—á–∞—Ç –º–∞—Ä—à—Ä—É—Ç. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?")
			msg.ReplyMarkup = kb
			_, _ = h.bot.Send(msg)
			return nil
		}

		// –∏–Ω–∞—á–µ ‚Äî —Å—Ç–∞—Ä—Ç—É–µ–º
		res, err := h.run.Start(u.Ctx, usr.ID, routeID)
		if err != nil {
			h.sendMessage(u.ChatID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –º–∞—Ä—à—Ä—É—Ç –ø—É—Å—Ç.")
			return nil
		}
		h.renderRoutePoint(u.ChatID, usr.ID, res)
		return nil
	})

	r.CallbackPrefix(CallbackContinueRoute, func(u *mux.UpdateCtx, v mux.Values) error {
		routeID, _ := strconv.Atoi(v["id"])
		usr := middlewares.UserFrom(u.Ctx)
		if usr == nil {
			h.sendMessage(u.ChatID, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
			return nil
		}

		res, ok, err := h.run.Continue(u.Ctx, usr.ID, routeID)
		if err != nil {
			h.sendMessage(u.ChatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
			return nil
		}
		if !ok {
			h.sendMessage(u.ChatID, "üèÅ –ú–∞—Ä—à—Ä—É—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
			return nil
		}
		h.renderRoutePoint(u.ChatID, usr.ID, res)
		return nil
	})

	r.CallbackPrefix(CallbackRestartRoute, func(u *mux.UpdateCtx, v mux.Values) error {
		routeID, _ := strconv.Atoi(v["id"])
		usr := middlewares.UserFrom(u.Ctx)
		if usr == nil {
			h.sendMessage(u.ChatID, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
			return nil
		}

		res, err := h.run.Restart(u.Ctx, usr.ID, routeID)
		if err != nil {
			h.sendMessage(u.ChatID, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
			return nil
		}
		h.renderRoutePoint(u.ChatID, usr.ID, res)
		return nil
	})

	r.CallbackPrefix(CallbackNextRoute, func(u *mux.UpdateCtx, v mux.Values) error {
		routeID, _ := strconv.Atoi(v["id"])
		usr := middlewares.UserFrom(u.Ctx)
		if usr == nil {
			h.sendMessage(u.ChatID, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
			return nil
		}

		res, ok, err := h.run.Continue(u.Ctx, usr.ID, routeID)
		if err != nil {
			h.sendMessage(u.ChatID, "–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
			return nil
		}
		if !ok {
			h.sendMessage(u.ChatID, "üèÅ –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑.")
			return nil
		}
		h.renderRoutePoint(u.ChatID, usr.ID, res)
		return nil
	})

	r.CallbackPrefix(CallbackPrevRoute, func(u *mux.UpdateCtx, v mux.Values) error {
		routeID, _ := strconv.Atoi(v["id"])
		usr := middlewares.UserFrom(u.Ctx)
		if usr == nil {
			h.sendMessage(u.ChatID, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
			return nil
		}

		res, ok, err := h.run.Prev(u.Ctx, usr.ID, routeID)
		if err != nil {
			h.sendMessage(u.ChatID, "–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
			return nil
		}
		if !ok {
			h.sendMessage(u.ChatID, "–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞.")
			return nil
		}
		h.renderRoutePoint(u.ChatID, usr.ID, res)
		return nil
	})

	r.CallbackPrefix(CallbackFinishRoute, func(u *mux.UpdateCtx, v mux.Values) error {
		routeID, _ := strconv.Atoi(v["id"])
		usr := middlewares.UserFrom(u.Ctx)
		if usr == nil {
			h.sendMessage(u.ChatID, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
			return nil
		}

		ver, _ := h.routes.Details(u.Ctx, routeID)
		if ver != nil {
			err := h.run.Finish(u.Ctx, usr.ID, ver.ID)
			if err != nil {
				h.sendMessage(u.ChatID, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
				return nil
			}
		}
		h.sendMessage(u.ChatID, "üèÅ –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ–≥—É–ª–∫—É.")
		return nil
	})

	// –î–µ—Ñ–æ–ª—Ç
	r.Default(func(u *mux.UpdateCtx) error {
		_, _ = h.bot.Send(tgbotapi.NewMessage(u.ChatID, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚å®Ô∏è"))
		return nil
	})

	h.router = r

	return h
}

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (h *Handler) HandleUpdate(update tgbotapi.Update) {
	if update.Message == nil {
		return
	}
	_ = h.router.Dispatch(&mux.UpdateCtx{
		Ctx:    context.Background(),
		Update: update,
		ChatID: update.Message.Chat.ID,
		Sender: h.bot,
	})
}

func (h *Handler) HandleCallback(update tgbotapi.Update) {
	if update.CallbackQuery == nil {
		return
	}
	_ = h.router.Dispatch(&mux.UpdateCtx{
		Ctx:    context.Background(),
		Update: update,
		ChatID: update.CallbackQuery.Message.Chat.ID,
		Sender: h.bot,
	})
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (h *Handler) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("Error sending message: %v", err)
	}
}

// showMainMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (h *Handler) showMainMenu(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
	msg.ReplyMarkup = keyboards.MainMenu()
	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("Error sending message: %v", err)
	}
}
