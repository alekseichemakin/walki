package handlers

import (
	"context"
	"fmt"
	"log"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (h *Handler) handleProfile(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
	myRoutesBtn := tgbotapi.NewInlineKeyboardButtonData("üö∂ –ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã", CallbackMyRoutes)
	backBtn := tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", CallbackMainMenu)

	markup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(myRoutesBtn),
		tgbotapi.NewInlineKeyboardRow(backBtn),
	)

	msg := tgbotapi.NewMessage(chatID, "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
	msg.ReplyMarkup = markup
	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("Error sending message: %v", err)
	}
}

func (h *Handler) showUserRoutes(chatID int64, userID int) {
	// –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	orders, err := h.profile.MyOrders(context.Background(), userID)
	if err != nil {
		log.Printf("Error getting user orders: %v", err)
		h.sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤")
		return
	}

	if len(orders) == 0 {
		h.sendMessage(chatID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤")
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
	var routeButtons []tgbotapi.InlineKeyboardButton
	for _, order := range orders {
		btnText := fmt.Sprintf("üìç %s (%s)", order.RouteTitle, order.RouteCity)
		btnData := CallbackPurchasedRoute + strconv.Itoa(order.RouteID)
		btn := tgbotapi.NewInlineKeyboardButtonData(btnText, btnData)
		routeButtons = append(routeButtons, btn)
	}

	// –°–æ–∑–¥–∞–µ–º rows –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–º–∞–∫—Å–∏–º—É–º 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É)
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, btn := range routeButtons {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	backBtn := tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", CallbackMainMenu)
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(backBtn))

	markup := tgbotapi.NewInlineKeyboardMarkup(rows...)

	msg := tgbotapi.NewMessage(chatID, "üö∂ *–í–∞—à–∏ –º–∞—Ä—à—Ä—É—Ç—ã:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = markup
	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("Error sending message: %v", err)
	}
}

func (h *Handler) showPurchasedRouteDetails(chatID int64, userID int, routeID int) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É
	hasAccess, err := h.profile.HasAccess(context.Background(), userID, routeID)
	if err != nil {
		log.Printf("Error checking access: %v", err)
		h.sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ä—à—Ä—É—Ç—É")
		return
	}

	if !hasAccess {
		h.sendMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
	orders, err := h.profile.MyOrders(context.Background(), userID)
	if err != nil {
		log.Printf("Error getting user orders: %v", err)
		h.sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–µ")
		return
	}

	// –ò—â–µ–º –∑–∞–∫–∞–∑ –∏ –≤–µ—Ä—Å–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
	var message string
	for _, order := range orders {
		if order.RouteID == routeID {
			route, err := h.routes.VersionByID(context.Background(), order.VersionID)
			if err != nil {
				log.Printf("Error getting route version: %v", err)
				h.sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞")
				return
			}
			var expiryInfo string
			if order.AccessExpiry != nil {
				expiryInfo = fmt.Sprintf("–¥–æ—Å—Ç—É–ø–µ–Ω –¥–æ %s", order.AccessExpiry.Format("02.01.2006"))
			} else {
				expiryInfo = "–±–µ—Å—Å—Ä–æ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø"
			}
			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ä—à—Ä—É—Ç–µ
			message = fmt.Sprintf(
				"üö∂ *%s*\n*–ì–æ—Ä–æ–¥:* %s\n*–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n*–ü—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç—å:* %.1f –∫–º\n*–í—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏:* %d –º–∏–Ω\n\n*–°—Ç–∞—Ç—É—Å:* %s",
				route.Title, route.City, route.Description, route.LengthKm, route.DurationMinutes, expiryInfo,
			)
			break
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–º
	startRouteBtn := tgbotapi.NewInlineKeyboardButtonData(
		"üéØ –ù–∞—á–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É",
		CallbackStartRoute+strconv.Itoa(routeID),
	)
	backBtn := tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", CallbackMyRoutes)

	markup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(startRouteBtn),
		tgbotapi.NewInlineKeyboardRow(backBtn),
	)

	msg := tgbotapi.NewMessage(chatID, message)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = markup
	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("Error sending message: %v", err)
	}
}
