package handlers

import (
	"context"
	"fmt"
	"log"
	"net/url"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"walki/internal/service"
)

/*
–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –¥–≤–∞ —à–∞–≥–∞:
1) –ö–æ–Ω—Ç–µ–Ω—Ç (—Ñ–æ—Ç–æ + caption, –ª–∏–±–æ —Ç–µ–∫—Å—Ç)
2) –ì–æ–ª–æ—Å (–æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
–í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∫–∞—Ä—Ç–æ—á–∫–∞ –±—ã–ª–∞ –≤–Ω–∏–∑—É —á–∞—Ç–∞.
*/
func (h *Handler) renderRoutePoint(chatID int64, userID int, data *service.PointWithMedia) {
	kb := h.navKeyboard(data.RouteID, data.HasPrev, data.HasNext)
	caption := buildCaption(data)

	// –ü–æ–¥–Ω–∏–º–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ content+voice, —à–ª—ë–º –Ω–æ–≤—ã–µ
	h.deleteIfExists(chatID, data.ContentMsgID)
	h.deleteIfExists(chatID, data.VoiceMsgID)

	if err := h.sendFreshContent(chatID, userID, data, caption, kb); err != nil {
		log.Printf("send fresh content: %v", err)
	}
	if err := h.sendFreshVoice(chatID, userID, data); err != nil {
		log.Printf("send fresh voice: %v", err)
	}
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ id (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
func (h *Handler) deleteIfExists(chatID int64, msgID *int) {
	if msgID == nil || *msgID == 0 {
		return
	}
	del := tgbotapi.NewDeleteMessage(chatID, *msgID)
	if _, err := h.bot.Request(del); err != nil {
		log.Printf("delete message %d: %v", *msgID, err)
	}
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∫–æ–Ω—Ç–µ–Ω—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ç–æ+–ø–æ–¥–ø–∏—Å—å –∏–ª–∏ —Ç–µ–∫—Å—Ç) –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ message_id
func (h *Handler) sendFreshContent(chatID int64, userID int, data *service.PointWithMedia, caption string, kb tgbotapi.InlineKeyboardMarkup) error {
	// –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–∫—ç—à TG + presigned S3)
	if len(data.PhotoIds) > 0 {
		_, msgID, err := h.tgMedia.SendMedia(h.ctx(), h.bot, chatID, data.PhotoIds[0], caption, "Markdown")
		if err != nil {
			return err
		}
		return h.run.UpdateMessageIDs(h.ctx(), userID, data.VersionID, &msgID, nil)
	}

	// –∏–Ω–∞—á–µ ‚Äî —Ç–µ–∫—Å—Ç–æ–≤–∞—è ¬´—Å—Ç—Ä–∞–Ω–∏—Ü–∞¬ª
	m := tgbotapi.NewMessage(chatID, caption)
	m.ParseMode = "Markdown"
	m.ReplyMarkup = kb
	sent, err := h.bot.Send(m)
	if err != nil {
		return err
	}
	return h.run.UpdateMessageIDs(h.ctx(), userID, data.VersionID, &sent.MessageID, nil)
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ voice-/audio-—Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ message_id, –∏–Ω–∞—á–µ –æ—á–∏—Å—Ç–∏—Ç—å voice_msg_id
func (h *Handler) sendFreshVoice(chatID int64, userID int, data *service.PointWithMedia) error {
	if len(data.VoiceIds) == 0 {
		// –æ—á–∏—Å—Ç–∏—Ç—å voice –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
		zero := 0 // —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Ç—Ä–∞–∫—Ç–æ–≤–∞—Ç—å 0 –∫–∞–∫ NULL (—á–µ—Ä–µ–∑ NULLIF)
		return h.run.UpdateMessageIDs(h.ctx(), userID, data.VersionID, nil, &zero)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (—Å–∞–º —Ä–µ—à–∏—Ç, —á–µ–º —Å–ª–∞—Ç—å –ø–æ MIME; –¥–ª—è –∞—É–¥–∏–æ —ç—Ç–æ –±—É–¥–µ—Ç Audio/Document)
	_, msgID, err := h.tgMedia.SendMedia(h.ctx(), h.bot, chatID, data.VoiceIds[0], "", "")
	if err != nil {
		return err
	}
	return h.run.UpdateMessageIDs(h.ctx(), userID, data.VersionID, nil, &msgID)
}

/* =========================
   UI/–≤—ë—Ä—Å—Ç–∫–∞
   ========================= */

func (h *Handler) navKeyboard(routeID int, hasPrev, hasNext bool) tgbotapi.InlineKeyboardMarkup {
	row := []tgbotapi.InlineKeyboardButton{}
	if hasPrev {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "route_prev:"+strconv.Itoa(routeID)))
	}
	if hasNext {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚ñ∂Ô∏è –î–∞–ª—å—à–µ", "route_next:"+strconv.Itoa(routeID)))
	} else {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", "route_finish:"+strconv.Itoa(routeID)))
	}
	return tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(row...))
}

func buildCaption(p *service.PointWithMedia) string {
	title := "üìç *" + escapeMd(p.Point.Title) + "*"
	desc := trimTo(850, escapeMd(p.Point.Description)) // —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–µ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —É–ª–æ–∂–∏—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç
	lat := fmt.Sprintf("%.6f", p.Point.Lat)
	lon := fmt.Sprintf("%.6f", p.Point.Lon)
	mapsURL := "https://maps.google.com/?q=" + url.QueryEscape(lat+","+lon)

	// –±–µ–∑ Markdown-—Å—Å—ã–ª–æ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ URL, –º–µ–Ω—å—à–µ —à–∞–Ω—Å–æ–≤ —Å–ª–æ–≤–∏—Ç—å parse error
	return fmt.Sprintf("%s\n\n%s\n\n`%s, %s`\n%s", title, desc, lat, lon, mapsURL)
}

func escapeMd(s string) string {
	return strings.NewReplacer("_", "\\_", "*", "\\*", "[", "\\[", "]", "\\]", "`", "\\`").Replace(s)
}

func trimTo(n int, s string) string {
	rs := []rune(s)
	if len(rs) <= n {
		return s
	}
	return string(rs[:n-1]) + "‚Ä¶"
}

func (h *Handler) ctx() context.Context { return context.Background() }
