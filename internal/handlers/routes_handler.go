package handlers

import (
	"context"
	"fmt"
	"log"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (h *Handler) handleRoutes(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	h.showCitySelection(chatID)
}

func (h *Handler) showCitySelection(chatID int64) {
	cities, err := h.routes.Cities(context.Background())
	if err != nil {
		log.Printf("Error getting cities: %v", err)
		h.sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ—Ä–æ–¥–æ–≤")
		return
	}

	if len(cities) == 0 {
		h.sendMessage(chatID, "–ü–æ–∫–∞ –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∏ –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ")
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, city := range cities {
		btn := tgbotapi.NewInlineKeyboardButtonData(city, CallbackCity+city)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
	backBtn := tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", CallbackMainMenu)
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(backBtn))

	markup := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:")
	msg.ReplyMarkup = markup
	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("Error sending message: %v", err)
	}
}

func (h *Handler) showRoutesByCity(chatID int64, city string) {
	routes, err := h.routes.ListByCity(context.Background(), city)
	if err != nil {
		log.Printf("Error getting routes for city %s: %v", city, err)
		h.sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤")
		return
	}

	if len(routes) == 0 {
		h.sendMessage(chatID, fmt.Sprintf("–í –≥–æ—Ä–æ–¥–µ %s –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤", city))
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, route := range routes {
		btnText := fmt.Sprintf("üìç %s (%.1f –∫–º)", route.Title, route.LengthKm)
		btnData := CallbackRoute + strconv.Itoa(route.RouteID)
		btn := tgbotapi.NewInlineKeyboardButtonData(btnText, btnData)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}

	// –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	backBtn := tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥–∞–º", CallbackSelectCity)
	menuBtn := tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackMainMenu)
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(backBtn, menuBtn))

	markup := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–ú–∞—Ä—à—Ä—É—Ç—ã –≤ –≥–æ—Ä–æ–¥–µ %s:", city))
	msg.ReplyMarkup = markup
	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("Error sending message: %v", err)
	}
}

func (h *Handler) showRouteDetails(chatID int64, routeID int) {
	version, err := h.routes.Details(context.Background(), routeID)
	if err != nil {
		log.Printf("Error getting route details for ID %d: %v", routeID, err)
		h.sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ")
		return
	}

	message := fmt.Sprintf(
		"üö∂ *%s*\n*–ì–æ—Ä–æ–¥:* %s\n*–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n*–ü—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç—å:* %.1f –∫–º\n*–í—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏:* %d –º–∏–Ω\n*–¢–µ–º–∞—Ç–∏–∫–∞:* %s\n*–¶–µ–Ω–∞:* %.2f —Ä—É–±.",
		version.Title, version.City, version.Description, version.LengthKm,
		version.DurationMinutes, version.Theme, version.Price,
	)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
	buyBtn := tgbotapi.NewInlineKeyboardButtonData("üí∞ –ö—É–ø–∏—Ç—å", CallbackBuy+strconv.Itoa(routeID))
	backBtn := tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", CallbackSelectCity)
	markup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(buyBtn),
		tgbotapi.NewInlineKeyboardRow(backBtn),
	)

	// –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–ª–æ–∂–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
	if version.CoverImageURL != "" {
		photo := tgbotapi.NewPhoto(chatID, tgbotapi.FileURL(version.CoverImageURL))
		photo.Caption = message
		photo.ParseMode = "Markdown"
		photo.ReplyMarkup = markup

		if _, err := h.bot.Send(photo); err != nil {
			log.Printf("Error sending photo: %v", err)
			// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			h.sendMessageWithMarkup(chatID, message, markup)
		}
	} else {
		// –ï—Å–ª–∏ –Ω–µ—Ç –æ–±–ª–æ–∂–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		h.sendMessageWithMarkup(chatID, message, markup)
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
func (h *Handler) sendMessageWithMarkup(chatID int64, text string, markup tgbotapi.InlineKeyboardMarkup) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = markup
	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("Error sending message: %v", err)
	}
}
